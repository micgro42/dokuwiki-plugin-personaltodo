{"version":3,"sources":["containers/AddProject.tsx","actions/projectActions.ts","containers/AddTodo.tsx","actions/todoActions.ts","components/Project/Project.tsx","components/ProjectList/ProjectList.tsx","containers/Projects.ts","components/ProjectTag/ProjectTag.tsx","components/TodoProjectsDisplay/TodoProjectsDisplay.tsx","components/Todo/TodoComponent.tsx","components/TodoList/TodoList.tsx","containers/Todos.ts","components/App/App.tsx","reducers/projects.ts","actions/RootActions.ts","reducers/todos.ts","reducers/rootReducer.ts","serviceWorker.ts","index.tsx"],"names":["connect","input","dispatch","onSubmit","e","preventDefault","value","trim","type","payload","projectId","title","ref","node","titleInput","dueDateInput","todo","todoId","projectIds","dueDate","completedDate","params","call","action","paramString","Object","entries","map","k","v","join","fetch","mode","then","addTodo","catch","console","error","required","Project","ProjectList","projects","values","project","key","id","state","ProjectTag","className","TodoProjectsDisplay","projectList","TodoComponent","TodoList","todos","App","Todos","Projects","date","rootReducer","combineReducers","Boolean","window","location","hostname","match","store","createStore","compose","applyMiddleware","thunkMiddleware","__REDUX_DEVTOOLS_EXTENSION__","response","json","log","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45687eac.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { addProject } from '../actions/projectActions';\n\nconst AddProject = ({dispatch}: any) => {\n    let input: HTMLInputElement|null;\n\n    return (\n        <div>\n            <form\n                onSubmit={e => {\n                    e.preventDefault();\n                    if (input === null || !input.value.trim()) {\n                        return;\n                    }\n                    dispatch(addProject({\n                        projectId: input.value,\n                        title: input.value,\n                    }));\n                    input.value = '';\n                }}\n            >\n                <input ref={node => (input = node)} />\n                <button type=\"submit\">Add Project</button>\n            </form>\n        </div>\n    );\n};\n\nexport default connect()(AddProject);\n","import { Project } from '../reducers/projects';\n\nexport const PROJECT_ADD = 'PROJECT_ADD';\n\ninterface AddProjectAction {\n    type: typeof PROJECT_ADD,\n    payload: Project // FIXME: payload is not a good name here\n}\n\nexport type ProjectActions = AddProjectAction;\n\nexport function addProject( project: Project ): AddProjectAction {\n    return {\n        type: PROJECT_ADD,\n        payload: project,\n    }\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { submitTodo } from '../actions/todoActions'\n\nconst AddTodo = ({ dispatch }: any) => {\n    let titleInput: HTMLInputElement | null;\n    let dueDateInput: HTMLInputElement | null;\n\n    return (\n        <div>\n            <form\n                onSubmit={e => {\n                    e.preventDefault();\n                    if (titleInput === null || !titleInput.value.trim()) {\n                        return\n                    }\n                    dispatch(submitTodo({\n                        todoId:  titleInput.value,\n                        title: titleInput.value,\n                        projectIds: [],\n                        dueDate: dueDateInput?.value,\n                        completedDate: null,\n                    }));\n                    titleInput.value = ''\n                }}\n            >\n                <input\n                    required\n                    ref={node => (titleInput = node)}\n                />\n                <input\n                    type=\"date\"\n                    ref={node => (dueDateInput = node)}\n                />\n                <button type=\"submit\">Add Todo</button>\n            </form>\n        </div>\n    )\n};\n\nexport default connect()(AddTodo)\n","// todo actions\n\nimport { Todo } from '../reducers/todos';\n\nexport const TODO_ADD = 'TODO_ADD';\nexport const TODO_COMPLETE = 'TODO_COMPLETE';\n\ninterface addTodoAction {\n    type: typeof TODO_ADD,\n    payload: Todo,\n}\n\ninterface completeTodoAction {\n    type: typeof TODO_COMPLETE,\n    todoId: string,\n    date: string,\n}\n\nexport function addTodo( todo: Todo ): addTodoAction {\n    return {\n        type: TODO_ADD,\n        payload: todo,\n    }\n}\n\n// addTodoAction\nexport function submitTodo( todo: Todo ) {\n\n    return (dispatch: Function) => {\n\n        const params = {\n            call: 'plugin_personaltodo',\n            action: 'saveTodo',\n            title: todo.title,\n            dueDate: todo.dueDate,\n        };\n        const paramString = Object.entries(params).map(([k,v]) => `${k}=${v}`).join('&')\n        return fetch( 'http://127.0.0.1/~michael/dokuwiki/lib/exe/ajax.php?'+paramString, {\n            // credentials: 'include',\n            mode: 'cors',\n        } )\n            .then( () => {\n                dispatch(addTodo(todo))\n\n            })\n            .catch(\n                console.error\n            );\n    }\n}\n\nexport type ToDoActions = addTodoAction | completeTodoAction;\n","import PropTypes from 'prop-types'\nimport React from 'react'\n\nconst Project = ({ title }: { title: string }) => (\n    <li>\n        {title}\n    </li>\n);\n\nProject.propTypes = {\n    title: PropTypes.string.isRequired\n};\n\nexport default Project;\n","import React from 'react'\n// import PropTypes from 'prop-types'\nimport Project from '../Project/Project';\n\nconst ProjectList = ({ projects }: any) => (\n    <ul>\n        {Object.values(projects).map(\n            (project: any) => (<Project key={project.id} {...project} />)\n        )}\n    </ul>\n);\n\nexport default ProjectList;\n","import { connect } from 'react-redux'\nimport ProjectList from '../components/ProjectList/ProjectList';\n\nconst mapStateToProps = (state: any) => ({\n    projects: state.projects\n});\n\nexport default connect(\n    mapStateToProps,\n)(ProjectList)\n","import React, { FunctionComponent } from 'react';\nimport {Project} from \"../../reducers/projects\";\n\ntype ProjectTagProps = Project;\n\nexport const ProjectTag: FunctionComponent<ProjectTagProps> = ({ title}) => (\n    <span className='tag is-light is-info'>{title}</span>\n);\n","import React, { FunctionComponent } from 'react';\nimport {Project, ProjectsMap} from \"../../reducers/projects\";\nimport {ProjectTag} from \"../ProjectTag/ProjectTag\";\nimport \"./TodoProjectsDisplay.scss\";\n\ntype TodoProjectsDisplayProps = {\n    projectIds: string[],\n    projects: ProjectsMap,\n}\n\nexport const TodoProjectsDisplay: FunctionComponent<TodoProjectsDisplayProps> = ({projectIds, projects}) => {\n\n    const projectList: Project[] = projectIds.map(projectId => {\n        return projects[projectId] ? projects[projectId] : { projectId: projectId, title: projectId}\n    });\n\n    return (\n        <ul className=\"TodoProjectsDisplay\">\n            {projectList.map( project => (<li className=\"TodoProjectsDisplay__project\" key={project.projectId}><ProjectTag {...project} /></li>))}\n        </ul>\n    );\n};\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport { Todo } from '../../reducers/todos';\nimport {ProjectsMap} from \"../../reducers/projects\";\nimport {TodoProjectsDisplay} from \"../TodoProjectsDisplay/TodoProjectsDisplay\";\n\nconst TodoComponent = ({ dueDate, title, projectIds, projects}: Todo&{projects: ProjectsMap}) => (\n    <li>\n        {title} {dueDate} <TodoProjectsDisplay projectIds={projectIds} projects={projects} />\n    </li>\n);\n\nTodoComponent.propTypes = {\n    title: PropTypes.string.isRequired,\n    projectIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n    projects: PropTypes.object.isRequired,\n};\n\nexport default TodoComponent;\n","import React from 'react'\n// import PropTypes from 'prop-types'\nimport TodoComponent from '../Todo/TodoComponent';\n\nconst TodoList = ({ todos, projects }: any) => (\n    <ul>\n        {Object.values(todos).map(\n            (todo: any) => (<TodoComponent key={todo.id} {...todo} projects={projects} />)\n        )}\n    </ul>\n);\n\nexport default TodoList;\n","import { connect } from 'react-redux'\nimport TodoList from '../components/TodoList/TodoList';\n\nconst mapStateToProps = (state: any) => ({\n    todos: state.todos,\n    projects: state.projects,\n});\n\nexport default connect(\n    mapStateToProps,\n)(TodoList)\n","import React from 'react';\nimport './App.css';\nimport AddProject from '../../containers/AddProject';\nimport AddTodo from '../../containers/AddTodo';\nimport Projects from '../../containers/Projects'\nimport Todos from '../../containers/Todos';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n        <Todos />\n        <AddTodo />\n        <Projects />\n        <AddProject />\n    </div>\n  );\n};\n\nexport default App;\n","import {PROJECT_ADD, ProjectActions} from '../actions/projectActions';\nimport {initalizeAction, INITIALIZE} from '../actions/RootActions';\n\nexport interface Project {\n    projectId: string\n    title: string\n}\n\nexport interface ProjectsMap {\n    [projectId: string]: Project\n}\n\nconst projects = (state: ProjectsMap = {}, action: ProjectActions|initalizeAction) => {\n    switch (action.type) {\n        case PROJECT_ADD:\n            return {\n                ...state,\n                [action.payload.projectId]: action.payload,\n            };\n        case INITIALIZE:\n            return action.payload.projects;\n        default:\n            return state;\n    }\n\n};\n\nexport default projects;\n","import { Project } from '../reducers/projects';\nimport { Todo } from '../reducers/todos';\n\nexport const INITIALIZE = 'INITIALIZE';\n\ninterface StateData {\n    // todoList: string[],\n    todos: {\n        [todoId: string]: Todo,\n    }\n    projects: {\n        [projectId: string]: Project,\n    }\n    // categories: {\n    //     [categoryId: string]: {\n    //         categoryId: string\n    //         title: string,\n    //         color: string,\n    //     }\n    // }\n}\n\n\nexport interface initalizeAction {\n    type: typeof INITIALIZE,\n    payload: {\n        todos: {\n            [todoId: string]:  Todo,\n        },\n        projects:  {\n            [projectId: string]: Project\n        }\n    },\n}\n\nexport default function hydrateStore(initialStoreData: StateData): initalizeAction {\n    return {\n        type: INITIALIZE,\n        payload: initialStoreData,\n    };\n}\n","import {initalizeAction, INITIALIZE} from '../actions/RootActions';\nimport { TODO_ADD, TODO_COMPLETE, ToDoActions } from '../actions/todoActions';\n\nexport interface Todo {\n    todoId: string,\n    title: string,\n    projectIds: string[]\n    dueDate?: string,\n    completedDate: null | string\n    // categoryId: string,\n    // description?\n    // priorities\n    // tags/labels\n    // workonDate\n}\n\nexport interface TodoMap {\n    [todoId: string]: Todo\n}\n\nconst todos = (state: TodoMap = {}, action: ToDoActions|initalizeAction) => {\n    switch (action.type) {\n        case TODO_ADD:\n            return {\n                ...state,\n                [action.payload.todoId]: action.payload\n            };\n        case TODO_COMPLETE:\n            return {\n                ...state,\n                [action.todoId]: {\n                    ...state[action.todoId],\n                    completedDate: action.date\n                },\n            };\n        case INITIALIZE:\n            // Todo: sort todos\n            return action.payload.todos;\n        default:\n            return state;\n    }\n};\n\nexport default todos;\n","// interface State {\n//     isFetching: boolean,\n//     todoList: string[],\n//     todos: {\n//         [todoId: string]: {\n//             todoId: string,\n//             title: string,\n//             projectIds: string[],\n//             categoryId: string,\n//             dueDate: string,\n//             completedDate: null|string\n//             // description?\n//             // priorities\n//             // tags/labels\n//             // workonDate\n//         }\n//     }\n//     projects: {\n//         [projectId: string]: {\n//             projectId: string\n//             title: string\n//         }\n//     }\n//     categories: {\n//         [categoryId: string]: {\n//             categoryId: string\n//             title: string,\n//             color: string,\n//         }\n//     }\n// }\n\n\nimport { combineReducers } from 'redux'\nimport projects, {ProjectsMap} from './projects';\nimport todos, {TodoMap} from './todos';\n\nexport interface State {\n    todos: TodoMap,\n    projects: ProjectsMap,\n}\n\nconst rootReducer = combineReducers({\n    projects,\n    todos,\n});\n\nexport default rootReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux'\nimport App from './components/App/App';\nimport rootReducer from './reducers/rootReducer';\nimport * as serviceWorker from './serviceWorker';\nimport hydrateStore from './actions/RootActions';\nimport thunkMiddleware from 'redux-thunk'\n\nconst store = createStore(\n    rootReducer,\n    compose(\n    applyMiddleware(\n        thunkMiddleware,\n    ),\n// @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n    )\n);\n\nconst params = { call: 'plugin_personaltodo', action: 'getdata'};\nconst paramString = Object.entries(params).map(([k,v]) => `${k}=${v}`).join('&')\nfetch( 'http://127.0.0.1/~michael/dokuwiki/lib/exe/ajax.php?'+paramString, {\n    // credentials: 'include',\n    mode: 'cors',\n} )\n    .then( response => response.json())\n    .then( response => {\n        console.log(response);\n        store.dispatch(hydrateStore(response));\n    })\n    .catch(\n        console.error\n    );\n\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note: this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}