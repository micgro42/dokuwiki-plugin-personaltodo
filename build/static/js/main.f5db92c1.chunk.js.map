{"version":3,"sources":["actions/projectActions.ts","containers/AddProject.tsx","actions/todoActions.ts","containers/AddTodo.tsx","components/Project/Project.tsx","components/ProjectList/ProjectList.tsx","containers/Projects.ts","components/Todo/TodoComponent.tsx","components/TodoList/TodoList.tsx","containers/Todos.ts","components/App/App.tsx","reducers/projects.ts","reducers/todos.ts","reducers/rootReducer.ts","serviceWorker.ts","index.tsx"],"names":["PROJECT_ADD","connect","input","dispatch","onSubmit","e","project","preventDefault","value","trim","id","title","type","payload","ref","node","TODO_ADD","titleInput","todo","projectsIds","completedDate","Project","ProjectList","projects","Object","values","map","key","state","TodoComponent","TodoList","todos","App","className","Todos","Projects","action","todoId","date","rootReducer","combineReducers","Boolean","window","location","hostname","match","store","createStore","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5db92c1.chunk.js","sourcesContent":["import { Project } from '../reducers/projects';\n\nexport const PROJECT_ADD = 'PROJECT_ADD';\n\ninterface AddProjectAction {\n    type: typeof PROJECT_ADD,\n    payload: Project // FIXME: payload is not a good name here\n}\n\nexport type ProjectActions = AddProjectAction;\n\nexport function addProject( project: Project ): AddProjectAction {\n    return {\n        type: PROJECT_ADD,\n        payload: project,\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addProject } from '../actions/projectActions';\n\nconst AddProject = ({dispatch}: any) => {\n    let input: HTMLInputElement|null;\n\n    return (\n        <div>\n            <form\n                onSubmit={e => {\n                    e.preventDefault();\n                    if (input === null || !input.value.trim()) {\n                        return;\n                    }\n                    dispatch(addProject({\n                        id: input.value,\n                        title: input.value,\n                    }));\n                    input.value = '';\n                }}\n            >\n                <input ref={node => (input = node)} />\n                <button type=\"submit\">Add Project</button>\n            </form>\n        </div>\n    );\n};\n\nexport default connect()(AddProject);\n","// todo actions\n\nimport { Project } from '../reducers/projects';\nimport { Todo } from '../reducers/todos';\nimport { PROJECT_ADD } from './projectActions';\n\nexport const TODO_ADD = 'TODO_ADD';\nexport const TODO_COMPLETE = 'TODO_COMPLETE';\n\ninterface addTodoAction {\n    type: typeof TODO_ADD,\n    payload: Todo,\n}\n\ninterface completeTodoAction {\n    type: typeof TODO_COMPLETE,\n    todoId: string,\n    date: string,\n}\n\nexport function addTodo( todo: Todo ): addTodoAction {\n    return {\n        type: TODO_ADD,\n        payload: todo,\n    }\n}\n\nexport type ToDoActions = addTodoAction | completeTodoAction;\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../actions/todoActions'\n\nconst AddTodo = ({ dispatch }: any) => {\n    let titleInput: HTMLInputElement | null;\n\n    return (\n        <div>\n            <form\n                onSubmit={e => {\n                    e.preventDefault();\n                    if (titleInput === null || !titleInput.value.trim()) {\n                        return\n                    }\n                    dispatch(addTodo({\n                        id:  titleInput.value,\n                        title: titleInput.value,\n                        projectsIds: [],\n                        completedDate: null,\n                    }));\n                    titleInput.value = ''\n                }}\n            >\n                <input ref={node => (titleInput = node)} />\n                <button type=\"submit\">Add Todo</button>\n            </form>\n        </div>\n    )\n};\n\nexport default connect()(AddTodo)\n","import PropTypes from 'prop-types'\nimport React from 'react'\n\nconst Project = ({ title }: { title: string }) => (\n    <li>\n        {title}\n    </li>\n);\n\nProject.propTypes = {\n    title: PropTypes.string.isRequired\n};\n\nexport default Project;\n","import React from 'react'\n// import PropTypes from 'prop-types'\nimport Project from '../Project/Project';\n\nconst ProjectList = ({ projects }: any) => (\n    <ul>\n        {Object.values(projects).map(\n            (project: any) => (<Project key={project.id} {...project} />)\n        )}\n    </ul>\n);\n\nexport default ProjectList;\n","import { connect } from 'react-redux'\nimport ProjectList from '../components/ProjectList/ProjectList';\n\nconst mapStateToProps = (state: any) => ({\n    projects: state.projects\n});\n\nexport default connect(\n    mapStateToProps,\n)(ProjectList)\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport { Todo } from '../../reducers/todos';\n\nconst TodoComponent = ({ title }: Todo) => (\n    <li>\n        {title}\n    </li>\n);\n\nTodoComponent.propTypes = {\n    title: PropTypes.string.isRequired\n};\n\nexport default TodoComponent;\n","import React from 'react'\n// import PropTypes from 'prop-types'\nimport TodoComponent from '../Todo/TodoComponent';\n\nconst TodoList = ({ todos }: any) => (\n    <ul>\n        {Object.values(todos).map(\n            (project: any) => (<TodoComponent key={project.id} {...project} />)\n        )}\n    </ul>\n);\n\nexport default TodoList;\n","import { connect } from 'react-redux'\nimport TodoList from '../components/TodoList/TodoList';\n\nconst mapStateToProps = (state: any) => ({\n    todos: state.todos\n});\n\nexport default connect(\n    mapStateToProps,\n)(TodoList)\n","import React from 'react';\nimport './App.css';\nimport AddProject from '../../containers/AddProject';\nimport AddTodo from '../../containers/AddTodo';\nimport Projects from '../../containers/Projects'\nimport Todos from '../../containers/Todos';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n        <Todos />\n        <AddTodo />\n        <Projects />\n        <AddProject />\n    </div>\n  );\n};\n\nexport default App;\n","import { PROJECT_ADD } from '../actions/projectActions';\n\nexport interface Project {\n    id: string\n    title: string\n}\n\nexport interface ProjectsMap {\n    [projectId: string]: Project\n}\n\nconst projects = (state: ProjectsMap = {}, action: any) => {\n    switch (action.type) {\n        case PROJECT_ADD:\n            return {\n                ...state,\n                [action.payload.id]: action.payload,\n            };\n        default:\n            return state;\n    }\n\n};\n\nexport default projects;\n","import { TODO_ADD, TODO_COMPLETE, ToDoActions } from '../actions/todoActions';\n\nexport interface Todo {\n    id: string,\n    title: string,\n    projectsIds: string[]\n    // categoryId: string,\n    // dueDate: string,\n    completedDate: null | string\n    // description?\n    // priorities\n    // tags/labels\n    // workonDate\n}\n\nexport interface TodoMap {\n    [todoId: string]: Todo\n}\n\nconst todos = (state: TodoMap = {}, action: ToDoActions|any) => {\n    switch (action.type) {\n        case TODO_ADD:\n            return {\n                ...state,\n                [action.payload.id]: action.payload\n            };\n        case TODO_COMPLETE:\n            return {\n                ...state,\n                [action.todoId]: {\n                    ...state[action.todoId],\n                    completedDate: action.date\n                },\n            };\n        default:\n            return state;\n    }\n};\n\nexport default todos;\n","// interface State {\n//     isFetching: boolean,\n//     todoList: string[],\n//     todos: {\n//         [todoId: string]: {\n//             todoId: string,\n//             title: string,\n//             projectIds: string[],\n//             categoryId: string,\n//             dueDate: string,\n//             completedDate: null|string\n//             // description?\n//             // priorities\n//             // tags/labels\n//             // workonDate\n//         }\n//     }\n//     projects: {\n//         [projectId: string]: {\n//             projectId: string\n//             title: string\n//         }\n//     }\n//     categories: {\n//         [categoryId: string]: {\n//             categoryId: string\n//             title: string,\n//             color: string,\n//         }\n//     }\n// }\n\n\nimport { combineReducers } from 'redux'\nimport projects from './projects';\nimport todos from './todos';\n\nconst rootReducer = combineReducers({\n    projects,\n    todos,\n});\n\nexport default rootReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'\nimport App from './components/App/App';\nimport rootReducer from './reducers/rootReducer';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst store = createStore(rootReducer, {\n    todos: {\n        'asd': {\n            id: 'asd',\n            title: 'a hardcoded todo',\n            projectsIds: [],\n            completedDate: null\n        }\n    },\n    projects: {\n        'qwe': {\n            id: 'qwe',\n            title: 'hardcoded Testproject'\n        }\n    }\n});\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note: this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}